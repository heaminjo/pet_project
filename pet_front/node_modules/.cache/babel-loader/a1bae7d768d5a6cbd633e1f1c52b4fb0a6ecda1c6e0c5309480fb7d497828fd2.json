{"ast":null,"code":"import axios from \"axios\";\nimport MemberApi from \"./MemberApi\";\n\n//공통 설정을 갖는 axios 인스턴스\nconst instance = axios.create({\n  baseURL: \"http://localhost:8080\"\n});\n\n//요청 인터셉터 설정(header에 토큰큰)\ninstance.interceptors.request.use(config => {\n  const token = localStorage.getItem(\"accessToken\");\n  //토큰이 존재하면\n  if (token != null) {\n    config.headers[\"authorization\"] = `Bearer ${token}`;\n  }\n  return config;\n});\n\n//interceptors 을 통해 에러 상태코드에 따른 핸들링\ninstance.interceptors.response.use(\n//성공한 응답일 경우 그대로 넘기지만\n//에러 일 경우 asycn 함수가 호출\nresponse => response, async error => {\n  //error.config는 에러가 난 객체의 설정 정보\n  const originalRequest = error.config;\n\n  //토큰이 만료되었을 경우\n  if (error.response.status == 401 && !originalRequest._retry) {\n    //계속 401 에러가 날경우 무한 요청 에러를 방지지\n    originalRequest._retry = true;\n    try {\n      //리프레쉬 가져오기\n      const response = await MemberApi.getRefresh();\n      //새로 발급된 엑세스 토큰\n      console.log(response);\n      const newToken = response.data.data.accessToken;\n      localStorage.setItem(\"accessToken\", newToken);\n      //요청 헤더에 새토큰 업데이트트\n      originalRequest.headers[\"authorization\"] = `Bearer ${newToken}`;\n\n      //원래 실패했던 요청에 토큰를 다시 갱신 후 다시 요청청\n      return instance(originalRequest);\n    } catch (error) {\n      var _error$response;\n      //리프레쉬 토큰 만료 시 로그아웃 처리\n      if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data.code) === \"AUTH004\") {\n        alert(\"로그인 세션이 만료되었습니다.\\n다시 로그인 하시길 바랍니다.\");\n      }\n      return Promise.reject(error);\n    }\n  }\n  return Promise.reject(error);\n});\nexport default instance;","map":{"version":3,"names":["axios","MemberApi","instance","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","response","error","originalRequest","status","_retry","getRefresh","console","log","newToken","data","accessToken","setItem","_error$response","code","alert","Promise","reject"],"sources":["C:/devv/pet_project/pet_front/src/api/axiosInstance.js"],"sourcesContent":["import axios from \"axios\";\r\nimport MemberApi from \"./MemberApi\";\r\n\r\n//공통 설정을 갖는 axios 인스턴스\r\nconst instance = axios.create({\r\n  baseURL: \"http://localhost:8080\",\r\n});\r\n\r\n//요청 인터셉터 설정(header에 토큰큰)\r\ninstance.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem(\"accessToken\");\r\n  //토큰이 존재하면\r\n  if (token != null) {\r\n    config.headers[\"authorization\"] = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n//interceptors 을 통해 에러 상태코드에 따른 핸들링\r\ninstance.interceptors.response.use(\r\n  //성공한 응답일 경우 그대로 넘기지만\r\n  //에러 일 경우 asycn 함수가 호출\r\n  (response) => response,\r\n  async (error) => {\r\n    //error.config는 에러가 난 객체의 설정 정보\r\n    const originalRequest = error.config;\r\n\r\n    //토큰이 만료되었을 경우\r\n    if (error.response.status == 401 && !originalRequest._retry) {\r\n      //계속 401 에러가 날경우 무한 요청 에러를 방지지\r\n      originalRequest._retry = true;\r\n\r\n      try {\r\n        //리프레쉬 가져오기\r\n        const response = await MemberApi.getRefresh();\r\n        //새로 발급된 엑세스 토큰\r\n        console.log(response);\r\n        const newToken = response.data.data.accessToken;\r\n\r\n        localStorage.setItem(\"accessToken\", newToken);\r\n        //요청 헤더에 새토큰 업데이트트\r\n        originalRequest.headers[\"authorization\"] = `Bearer ${newToken}`;\r\n\r\n        //원래 실패했던 요청에 토큰를 다시 갱신 후 다시 요청청\r\n        return instance(originalRequest);\r\n      } catch (error) {\r\n        //리프레쉬 토큰 만료 시 로그아웃 처리\r\n        if (error.response?.data.code === \"AUTH004\") {\r\n          alert(\"로그인 세션이 만료되었습니다.\\n다시 로그인 하시길 바랍니다.\");\r\n        }\r\n        return Promise.reject(error);\r\n      }\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\nexport default instance;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,SAAS,MAAM,aAAa;;AAEnC;AACA,MAAMC,QAAQ,GAAGF,KAAK,CAACG,MAAM,CAAC;EAC5BC,OAAO,EAAE;AACX,CAAC,CAAC;;AAEF;AACAF,QAAQ,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EAC5C,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;EACjD;EACA,IAAIF,KAAK,IAAI,IAAI,EAAE;IACjBD,MAAM,CAACI,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUH,KAAK,EAAE;EACrD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACAN,QAAQ,CAACG,YAAY,CAACQ,QAAQ,CAACN,GAAG;AAChC;AACA;AACCM,QAAQ,IAAKA,QAAQ,EACtB,MAAOC,KAAK,IAAK;EACf;EACA,MAAMC,eAAe,GAAGD,KAAK,CAACN,MAAM;;EAEpC;EACA,IAAIM,KAAK,CAACD,QAAQ,CAACG,MAAM,IAAI,GAAG,IAAI,CAACD,eAAe,CAACE,MAAM,EAAE;IAC3D;IACAF,eAAe,CAACE,MAAM,GAAG,IAAI;IAE7B,IAAI;MACF;MACA,MAAMJ,QAAQ,GAAG,MAAMZ,SAAS,CAACiB,UAAU,CAAC,CAAC;MAC7C;MACAC,OAAO,CAACC,GAAG,CAACP,QAAQ,CAAC;MACrB,MAAMQ,QAAQ,GAAGR,QAAQ,CAACS,IAAI,CAACA,IAAI,CAACC,WAAW;MAE/Cb,YAAY,CAACc,OAAO,CAAC,aAAa,EAAEH,QAAQ,CAAC;MAC7C;MACAN,eAAe,CAACH,OAAO,CAAC,eAAe,CAAC,GAAG,UAAUS,QAAQ,EAAE;;MAE/D;MACA,OAAOnB,QAAQ,CAACa,eAAe,CAAC;IAClC,CAAC,CAAC,OAAOD,KAAK,EAAE;MAAA,IAAAW,eAAA;MACd;MACA,IAAI,EAAAA,eAAA,GAAAX,KAAK,CAACD,QAAQ,cAAAY,eAAA,uBAAdA,eAAA,CAAgBH,IAAI,CAACI,IAAI,MAAK,SAAS,EAAE;QAC3CC,KAAK,CAAC,oCAAoC,CAAC;MAC7C;MACA,OAAOC,OAAO,CAACC,MAAM,CAACf,KAAK,CAAC;IAC9B;EACF;EACA,OAAOc,OAAO,CAACC,MAAM,CAACf,KAAK,CAAC;AAC9B,CACF,CAAC;AACD,eAAeZ,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}