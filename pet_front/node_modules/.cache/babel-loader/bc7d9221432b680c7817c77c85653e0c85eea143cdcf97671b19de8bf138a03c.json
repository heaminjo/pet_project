{"ast":null,"code":"import axios from \"axios\";\nimport instance from \"./axiosInstance\";\nconst KH_DOMAIN = \"http://localhost:8080\";\nconst MemberApi = {\n  //로그인\n  login: async (email, password) => {\n    const login = {\n      email: email,\n      password: password\n    };\n    const result = await axios.post(`${KH_DOMAIN}/auth/login`, login);\n    return result.data;\n  },\n  //이메일 중복 체크\n  dupEmail: async email => {\n    const result = await axios.get(`${KH_DOMAIN}/member/emailcheck?email=${email}`);\n    return result.data;\n  },\n  //회원가입\n  join: async newUser => {\n    const result = await axios.post(`${KH_DOMAIN}/auth/join`, newUser);\n    return result.data.body;\n  },\n  //회원 조회\n  detail: async () => {\n    const result = await instance.get(`${KH_DOMAIN}/member/detail`);\n    return result.data;\n  },\n  //회원 수정정\n  update: async user => {\n    const result = await axios.patch(`${KH_DOMAIN}/member/update`, user, {\n      headers: {\n        Authorization: `${localStorage.getItem(\"grantType\")} ${localStorage.getItem(\"accessToken\")}`\n      }\n    });\n    return result.data;\n  },\n  //비밀번호 변경\n  updatePw: async passwords => {\n    const result = await axios.patch(`${KH_DOMAIN}/member/pwupdate`, passwords, {\n      headers: {\n        Authorization: `${localStorage.getItem(\"grantType\")} ${localStorage.getItem(\"accessToken\")}`\n      }\n    });\n    return result.data;\n  },\n  //리프레쉬 가져오기기\n  getRefresh: async () => {\n    const result = await axios.get(`${KH_DOMAIN}/auth/getrefresh`, {\n      headers: {\n        Authorization: `${localStorage.getItem(\"grantType\")} ${localStorage.getItem(\"accessToken\")}`\n      }\n    });\n  }\n};\nexport default MemberApi;","map":{"version":3,"names":["axios","instance","KH_DOMAIN","MemberApi","login","email","password","result","post","data","dupEmail","get","join","newUser","body","detail","update","user","patch","headers","Authorization","localStorage","getItem","updatePw","passwords","getRefresh"],"sources":["C:/devv/pet_project/pet_front/src/api/MemberApi.js"],"sourcesContent":["import axios from \"axios\";\r\nimport instance from \"./axiosInstance\";\r\nconst KH_DOMAIN = \"http://localhost:8080\";\r\nconst MemberApi = {\r\n  //로그인\r\n  login: async (email, password) => {\r\n    const login = {\r\n      email: email,\r\n      password: password,\r\n    };\r\n    const result = await axios.post(`${KH_DOMAIN}/auth/login`, login);\r\n    return result.data;\r\n  },\r\n  //이메일 중복 체크\r\n  dupEmail: async (email) => {\r\n    const result = await axios.get(\r\n      `${KH_DOMAIN}/member/emailcheck?email=${email}`\r\n    );\r\n    return result.data;\r\n  },\r\n\r\n  //회원가입\r\n  join: async (newUser) => {\r\n    const result = await axios.post(`${KH_DOMAIN}/auth/join`, newUser);\r\n    return result.data.body;\r\n  },\r\n\r\n  //회원 조회\r\n  detail: async () => {\r\n    const result = await instance.get(`${KH_DOMAIN}/member/detail`);\r\n    return result.data;\r\n  },\r\n\r\n  //회원 수정정\r\n  update: async (user) => {\r\n    const result = await axios.patch(`${KH_DOMAIN}/member/update`, user, {\r\n      headers: {\r\n        Authorization: `${localStorage.getItem(\r\n          \"grantType\"\r\n        )} ${localStorage.getItem(\"accessToken\")}`,\r\n      },\r\n    });\r\n    return result.data;\r\n  },\r\n\r\n  //비밀번호 변경\r\n  updatePw: async (passwords) => {\r\n    const result = await axios.patch(\r\n      `${KH_DOMAIN}/member/pwupdate`,\r\n      passwords,\r\n      {\r\n        headers: {\r\n          Authorization: `${localStorage.getItem(\r\n            \"grantType\"\r\n          )} ${localStorage.getItem(\"accessToken\")}`,\r\n        },\r\n      }\r\n    );\r\n    return result.data;\r\n  },\r\n\r\n  //리프레쉬 가져오기기\r\n  getRefresh: async () => {\r\n    const result = await axios.get(`${KH_DOMAIN}/auth/getrefresh`, {\r\n      headers: {\r\n        Authorization: `${localStorage.getItem(\r\n          \"grantType\"\r\n        )} ${localStorage.getItem(\"accessToken\")}`,\r\n      },\r\n    });\r\n  },\r\n};\r\nexport default MemberApi;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,iBAAiB;AACtC,MAAMC,SAAS,GAAG,uBAAuB;AACzC,MAAMC,SAAS,GAAG;EAChB;EACAC,KAAK,EAAE,MAAAA,CAAOC,KAAK,EAAEC,QAAQ,KAAK;IAChC,MAAMF,KAAK,GAAG;MACZC,KAAK,EAAEA,KAAK;MACZC,QAAQ,EAAEA;IACZ,CAAC;IACD,MAAMC,MAAM,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGN,SAAS,aAAa,EAAEE,KAAK,CAAC;IACjE,OAAOG,MAAM,CAACE,IAAI;EACpB,CAAC;EACD;EACAC,QAAQ,EAAE,MAAOL,KAAK,IAAK;IACzB,MAAME,MAAM,GAAG,MAAMP,KAAK,CAACW,GAAG,CAC5B,GAAGT,SAAS,4BAA4BG,KAAK,EAC/C,CAAC;IACD,OAAOE,MAAM,CAACE,IAAI;EACpB,CAAC;EAED;EACAG,IAAI,EAAE,MAAOC,OAAO,IAAK;IACvB,MAAMN,MAAM,GAAG,MAAMP,KAAK,CAACQ,IAAI,CAAC,GAAGN,SAAS,YAAY,EAAEW,OAAO,CAAC;IAClE,OAAON,MAAM,CAACE,IAAI,CAACK,IAAI;EACzB,CAAC;EAED;EACAC,MAAM,EAAE,MAAAA,CAAA,KAAY;IAClB,MAAMR,MAAM,GAAG,MAAMN,QAAQ,CAACU,GAAG,CAAC,GAAGT,SAAS,gBAAgB,CAAC;IAC/D,OAAOK,MAAM,CAACE,IAAI;EACpB,CAAC;EAED;EACAO,MAAM,EAAE,MAAOC,IAAI,IAAK;IACtB,MAAMV,MAAM,GAAG,MAAMP,KAAK,CAACkB,KAAK,CAAC,GAAGhB,SAAS,gBAAgB,EAAEe,IAAI,EAAE;MACnEE,OAAO,EAAE;QACPC,aAAa,EAAE,GAAGC,YAAY,CAACC,OAAO,CACpC,WACF,CAAC,IAAID,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;MAC1C;IACF,CAAC,CAAC;IACF,OAAOf,MAAM,CAACE,IAAI;EACpB,CAAC;EAED;EACAc,QAAQ,EAAE,MAAOC,SAAS,IAAK;IAC7B,MAAMjB,MAAM,GAAG,MAAMP,KAAK,CAACkB,KAAK,CAC9B,GAAGhB,SAAS,kBAAkB,EAC9BsB,SAAS,EACT;MACEL,OAAO,EAAE;QACPC,aAAa,EAAE,GAAGC,YAAY,CAACC,OAAO,CACpC,WACF,CAAC,IAAID,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;MAC1C;IACF,CACF,CAAC;IACD,OAAOf,MAAM,CAACE,IAAI;EACpB,CAAC;EAED;EACAgB,UAAU,EAAE,MAAAA,CAAA,KAAY;IACtB,MAAMlB,MAAM,GAAG,MAAMP,KAAK,CAACW,GAAG,CAAC,GAAGT,SAAS,kBAAkB,EAAE;MAC7DiB,OAAO,EAAE;QACPC,aAAa,EAAE,GAAGC,YAAY,CAACC,OAAO,CACpC,WACF,CAAC,IAAID,YAAY,CAACC,OAAO,CAAC,aAAa,CAAC;MAC1C;IACF,CAAC,CAAC;EACJ;AACF,CAAC;AACD,eAAenB,SAAS","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}