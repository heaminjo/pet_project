{"ast":null,"code":"import axios from \"axios\";\nimport instance from \"../api/axiosInstance\"; // 인스턴스 불러오기\n\nconst KH_DOMAIN = \"http://localhost:8080\";\nconst GoodsApi = {\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 장 바 구 니 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // 장바구니 추가\n  addToCart: async goods => {\n    //alert(`장바구니 담기 => ${goods}`);\n\n    console.log(`장바구니 담기 시도 => ${goods.goodsId}, 수량: ${goods.quantity}`);\n    const result = await instance.post(\"/cart/add\", goods);\n    try {\n      if (result.data != null) {\n        console.log(\"장바구니 담기 완료\");\n        return result.data;\n      } else {\n        console.log(\"장바구니 담기 실패\");\n      }\n    } catch (err) {\n      console.error(\"장바구니 추가 실패:\", err);\n      alert(\"장바구니 추가 중 에러가 발생했습니다.\");\n    }\n  },\n  // // <Cart />\n  // cartList: async () => {\n  //   const result = await instance.get('/cart/list');\n  //   alert(`GoodsApi의 cartList 호출완료 => ${JSON.stringify(result.data)} `);\n  //   return result.data;\n  // },\n  // <Cart /> : 페이징 추가\n  getCartPageList: async pages => {\n    alert(`getPageList() 호출됨, pages = ${JSON.stringify(pages)}`);\n    const result = await instance.post(`/cart/list`, pages);\n    alert(`getPageList() 호출됨, result = ${result.data}`);\n    return result.data;\n  },\n  // 찜\n  favorite: async goodsId => {\n    try {\n      const result = await instance.post(`/goods/favorite/${goodsId}`);\n      if (result.data != null) {\n        alert(`찜 등록 완료 => ${JSON.stringify(result.data)}`);\n        return result.data;\n      }\n    } catch (err) {}\n  },\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 상  품 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // <GoodsList /> 전체 상품 리스트 출력 (메인) (완료)\n  getGoodsPageList: async pages => {\n    alert(`getGoodsPageList() 호출됨, pages = ${JSON.stringify(pages)}`);\n    try {\n      const result = await instance.post(`/goods/list`, pages);\n      if (result.data != null) {\n        console.log(\"📦 응답 결과:\", result);\n        alert(`getGoodsPageList() 호출됨, result = ${result.data}`);\n        return result.data;\n      }\n    } catch (err) {}\n  },\n  // <Goods />\n  regGoods: async formData => {\n    try {\n      const result = await instance.post(\"/goods/register\", formData, {\n        headers: {\n          \"Content-Type\": \"multipart/form-data\"\n        }\n      });\n      if (result.data != null) {\n        alert(`상품등록 완료 => ${result.data}`);\n        return result.data;\n      }\n    } catch (err) {\n      console.error(\"상품 등록 실패:\", err);\n      alert(\"상품 등록 중 에러가 발생했습니다.\");\n    }\n  },\n  // 상품상세정보 (단일)\n  goodsDetail: async () => {\n    const result = await instance.get(\"/goods/detail/${goods_id}\");\n    return result.data;\n  },\n  // // 상품등록 (기존 axios 사용한 코드 - 예시)\n  // regGoods: async (goods) => {\n  //   try {\n  //     const result = await axios.post(`${KH_DOMAIN}/goods/register`, goods, {\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //         Authorization: `${localStorage.getItem('grantType')} ${localStorage.getItem('accessToken')}`,\n  //       },\n  //     });\n  //     if (result.data != null) {\n  //       alert(`상품등록 완료 => ${result.data}`);\n  //       return result.data;\n  //     }\n  //   } catch (err) {\n  //     console.error('상품 등록 실패:', err);\n  //     alert('상품 등록 중 에러가 발생했습니다.');\n  //   }\n  // }, // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n  //배너 가져오기\n  getBanner: async () => {\n    const result = await axios.get(`${KH_DOMAIN}/goods/banner/list`);\n    return result.data;\n  },\n  //카테고리 목록 가져오기\n  getCategoryList: async () => {\n    const result = await axios.get(`${KH_DOMAIN}/goods/category/list`);\n    return result.data;\n  },\n  //상품 페이징 목록록\n  getGoodsList: async pages => {\n    const result = await axios.post(`${KH_DOMAIN}/goods/page/list`, pages);\n    return result.data;\n  },\n  //배너 추가\n  bannerInsert: async newBanner => {\n    const formData = new FormData();\n    formData.append(\"file\", newBanner.imageFile);\n    formData.append(\"position\", newBanner.position.toString());\n    const result = await axios.post(`${KH_DOMAIN}/goods/banner/insert`, formData);\n    return result.data;\n  }\n};\nexport default GoodsApi;","map":{"version":3,"names":["axios","instance","KH_DOMAIN","GoodsApi","addToCart","goods","console","log","goodsId","quantity","result","post","data","err","error","alert","getCartPageList","pages","JSON","stringify","favorite","getGoodsPageList","regGoods","formData","headers","goodsDetail","get","getBanner","getCategoryList","getGoodsList","bannerInsert","newBanner","FormData","append","imageFile","position","toString"],"sources":["C:/devv/pet_project/pet_front/src/api/GoodsApi.js"],"sourcesContent":["import axios from \"axios\";\r\nimport instance from \"../api/axiosInstance\"; // 인스턴스 불러오기\r\n\r\nconst KH_DOMAIN = \"http://localhost:8080\";\r\nconst GoodsApi = {\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 장 바 구 니 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  // 장바구니 추가\r\n  addToCart: async (goods) => {\r\n    //alert(`장바구니 담기 => ${goods}`);\r\n\r\n    console.log(\r\n      `장바구니 담기 시도 => ${goods.goodsId}, 수량: ${goods.quantity}`\r\n    );\r\n    const result = await instance.post(\"/cart/add\", goods);\r\n    try {\r\n      if (result.data != null) {\r\n        console.log(\"장바구니 담기 완료\");\r\n        return result.data;\r\n      } else {\r\n        console.log(\"장바구니 담기 실패\");\r\n      }\r\n    } catch (err) {\r\n      console.error(\"장바구니 추가 실패:\", err);\r\n      alert(\"장바구니 추가 중 에러가 발생했습니다.\");\r\n    }\r\n  },\r\n  // // <Cart />\r\n  // cartList: async () => {\r\n  //   const result = await instance.get('/cart/list');\r\n  //   alert(`GoodsApi의 cartList 호출완료 => ${JSON.stringify(result.data)} `);\r\n  //   return result.data;\r\n  // },\r\n  // <Cart /> : 페이징 추가\r\n  getCartPageList: async (pages) => {\r\n    alert(`getPageList() 호출됨, pages = ${JSON.stringify(pages)}`);\r\n    const result = await instance.post(`/cart/list`, pages);\r\n    alert(`getPageList() 호출됨, result = ${result.data}`);\r\n    return result.data;\r\n  },\r\n\r\n  // 찜\r\n  favorite: async (goodsId) => {\r\n    try {\r\n      const result = await instance.post(`/goods/favorite/${goodsId}`);\r\n      if (result.data != null) {\r\n        alert(`찜 등록 완료 => ${JSON.stringify(result.data)}`);\r\n        return result.data;\r\n      }\r\n    } catch (err) {}\r\n  },\r\n\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 상  품 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  // <GoodsList /> 전체 상품 리스트 출력 (메인) (완료)\r\n  getGoodsPageList: async (pages) => {\r\n    alert(`getGoodsPageList() 호출됨, pages = ${JSON.stringify(pages)}`);\r\n    try {\r\n      const result = await instance.post(`/goods/list`, pages);\r\n      if (result.data != null) {\r\n        console.log(\"📦 응답 결과:\", result);\r\n        alert(`getGoodsPageList() 호출됨, result = ${result.data}`);\r\n        return result.data;\r\n      }\r\n    } catch (err) {}\r\n  },\r\n\r\n  // <Goods />\r\n  regGoods: async (formData) => {\r\n    try {\r\n      const result = await instance.post(\"/goods/register\", formData, {\r\n        headers: {\r\n          \"Content-Type\": \"multipart/form-data\",\r\n        },\r\n      });\r\n      if (result.data != null) {\r\n        alert(`상품등록 완료 => ${result.data}`);\r\n        return result.data;\r\n      }\r\n    } catch (err) {\r\n      console.error(\"상품 등록 실패:\", err);\r\n      alert(\"상품 등록 중 에러가 발생했습니다.\");\r\n    }\r\n  },\r\n\r\n  // 상품상세정보 (단일)\r\n  goodsDetail: async () => {\r\n    const result = await instance.get(\"/goods/detail/${goods_id}\");\r\n    return result.data;\r\n  },\r\n\r\n  // // 상품등록 (기존 axios 사용한 코드 - 예시)\r\n  // regGoods: async (goods) => {\r\n  //   try {\r\n  //     const result = await axios.post(`${KH_DOMAIN}/goods/register`, goods, {\r\n  //       headers: {\r\n  //         'Content-Type': 'application/json',\r\n  //         Authorization: `${localStorage.getItem('grantType')} ${localStorage.getItem('accessToken')}`,\r\n  //       },\r\n  //     });\r\n  //     if (result.data != null) {\r\n  //       alert(`상품등록 완료 => ${result.data}`);\r\n  //       return result.data;\r\n  //     }\r\n  //   } catch (err) {\r\n  //     console.error('상품 등록 실패:', err);\r\n  //     alert('상품 등록 중 에러가 발생했습니다.');\r\n  //   }\r\n  // }, // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n  //배너 가져오기\r\n  getBanner: async () => {\r\n    const result = await axios.get(`${KH_DOMAIN}/goods/banner/list`);\r\n    return result.data;\r\n  },\r\n\r\n  //카테고리 목록 가져오기\r\n  getCategoryList: async () => {\r\n    const result = await axios.get(`${KH_DOMAIN}/goods/category/list`);\r\n    return result.data;\r\n  },\r\n  //상품 페이징 목록록\r\n  getGoodsList: async (pages) => {\r\n    const result = await axios.post(`${KH_DOMAIN}/goods/page/list`, pages);\r\n    return result.data;\r\n  },\r\n  //배너 추가\r\n  bannerInsert: async (newBanner) => {\r\n    const formData = new FormData();\r\n    formData.append(\"file\", newBanner.imageFile);\r\n    formData.append(\"position\", newBanner.position.toString());\r\n\r\n    const result = await axios.post(\r\n      `${KH_DOMAIN}/goods/banner/insert`,\r\n      formData\r\n    );\r\n\r\n    return result.data;\r\n  },\r\n};\r\n\r\nexport default GoodsApi;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}