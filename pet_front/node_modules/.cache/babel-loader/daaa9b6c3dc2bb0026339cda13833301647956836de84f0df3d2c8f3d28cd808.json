{"ast":null,"code":"import axios from 'axios';\nimport instance from '../api/axiosInstance'; // 인스턴스 불러오기\n\nconst KH_DOMAIN = 'http://localhost:8080';\nconst GoodsApi = {\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 장 바 구 니 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // 장바구니 추가\n  addToCart: async goods => {\n    //alert(`장바구니 담기 => ${goods}`);\n\n    console.log(`장바구니 담기 시도 => ${goods.goods_id}, 수량: ${goods.quantity}`);\n    const result = await instance.post('/cart/add', goods);\n    try {\n      if (result.data != null) {\n        console.log('장바구니 담기 완료');\n        return result.data;\n      } else {\n        console.log('장바구니 담기 실패');\n      }\n    } catch (err) {\n      console.error('장바구니 추가 실패:', err);\n      alert('장바구니 추가 중 에러가 발생했습니다.');\n    }\n  },\n  // <Cart />\n  cartList: async () => {\n    const result = await instance.get('/cart/list');\n    alert(`GoodsApi의 cartList 호출완료 => ${JSON.stringify(result.data)} `);\n    return result.data;\n  },\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 상  품 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // <GoodsList /> 전체 상품 리스트 출력 (메인) (완료)\n  showGoods: async () => {\n    try {\n      const result = await instance.get('/goods/list');\n      if (result.data != null) {\n        alert(`상품 리스트 호출 완료 => ${JSON.stringify(result.data)}`);\n        return result.data;\n      }\n    } catch (err) {}\n  },\n  // (order_id)로 주문한 상품의 오더정보 / 상품정보\n  customerGoodsHistory: async orderIds => {\n    console.log('🔥 주문 ID 리스트:', orderIds);\n    alert('GoodsApi customerGoodsHistory');\n    try {\n      const result = await instance.post('/goods/orderinfo', orderIds);\n      if (result.data != null) {\n        console.log(`구매이력 상품 호출 완료 => ${JSON.stringify(result.data)}`);\n        return result.data;\n      }\n    } catch (err) {}\n  },\n  // <Goods />\n  regGoods: async formData => {\n    try {\n      const result = await instance.post('/goods/register', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      if (result.data != null) {\n        alert(`상품등록 완료 => ${result.data}`);\n        return result.data;\n      }\n    } catch (err) {\n      console.error('상품 등록 실패:', err);\n      alert('상품 등록 중 에러가 발생했습니다.');\n    }\n  },\n  // 상품상세정보\n  goodsDetail: async goods_id => {},\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 주  문 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // <Order />\n  order: async () => {\n    const result = await instance.post(`/goods/order`);\n    return result.data;\n  },\n  // <OrderDetail />\n  orderList: async () => {\n    const result = await instance.get('/goods/ordered');\n    return result.data;\n  },\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 결  제 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n  // 결제\n  pay: async payload => {\n    payload.goodsList.forEach(item => {\n      console.log(`결제 시도 => 상품 ID: ${item.goods_id}, 상품 수량: ${item.quantity}`);\n    });\n    const result = await instance.post(`/goods/pay`, payload);\n    try {\n      if (result != null) {\n        return result.data;\n      } else {\n        alert(`GoodsApi.pay() null`);\n      }\n    } catch (err) {\n      console.error('오류 발생:', err);\n      alert('GoodsApi.pay() 수행중 에러발생.');\n    }\n    return result.data;\n    //console.log(JSON.stringify(payload, null, 2));\n  },\n  findAddress: async () => {\n    const result = await instance.get(`/goods/findaddress`);\n  }\n\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 끝 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n\n  // // 상품등록 (기존 axios 사용한 코드 - 예시)\n  // regGoods: async (goods) => {\n  //   try {\n  //     const result = await axios.post(`${KH_DOMAIN}/goods/register`, goods, {\n  //       headers: {\n  //         'Content-Type': 'application/json',\n  //         Authorization: `${localStorage.getItem('grantType')} ${localStorage.getItem('accessToken')}`,\n  //       },\n  //     });\n  //     if (result.data != null) {\n  //       alert(`상품등록 완료 => ${result.data}`);\n  //       return result.data;\n  //     }\n  //   } catch (err) {\n  //     console.error('상품 등록 실패:', err);\n  //     alert('상품 등록 중 에러가 발생했습니다.');\n  //   }\n  // }, // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n};\nexport default GoodsApi;","map":{"version":3,"names":["axios","instance","KH_DOMAIN","GoodsApi","addToCart","goods","console","log","goods_id","quantity","result","post","data","err","error","alert","cartList","get","JSON","stringify","showGoods","customerGoodsHistory","orderIds","regGoods","formData","headers","goodsDetail","order","orderList","pay","payload","goodsList","forEach","item","findAddress"],"sources":["C:/devv/pet_project/pet_front/src/api/GoodsApi.js"],"sourcesContent":["import axios from 'axios';\r\nimport instance from '../api/axiosInstance'; // 인스턴스 불러오기\r\n\r\nconst KH_DOMAIN = 'http://localhost:8080';\r\nconst GoodsApi = {\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 장 바 구 니 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  // 장바구니 추가\r\n  addToCart: async (goods) => {\r\n    //alert(`장바구니 담기 => ${goods}`);\r\n\r\n    console.log(`장바구니 담기 시도 => ${goods.goods_id}, 수량: ${goods.quantity}`);\r\n    const result = await instance.post('/cart/add', goods);\r\n    try {\r\n      if (result.data != null) {\r\n        console.log('장바구니 담기 완료');\r\n        return result.data;\r\n      } else {\r\n        console.log('장바구니 담기 실패');\r\n      }\r\n    } catch (err) {\r\n      console.error('장바구니 추가 실패:', err);\r\n      alert('장바구니 추가 중 에러가 발생했습니다.');\r\n    }\r\n  },\r\n  // <Cart />\r\n  cartList: async () => {\r\n    const result = await instance.get('/cart/list');\r\n    alert(`GoodsApi의 cartList 호출완료 => ${JSON.stringify(result.data)} `);\r\n    return result.data;\r\n  },\r\n\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 상  품 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  // <GoodsList /> 전체 상품 리스트 출력 (메인) (완료)\r\n  showGoods: async () => {\r\n    try {\r\n      const result = await instance.get('/goods/list');\r\n      if (result.data != null) {\r\n        alert(`상품 리스트 호출 완료 => ${JSON.stringify(result.data)}`);\r\n        return result.data;\r\n      }\r\n    } catch (err) {}\r\n  },\r\n\r\n  // (order_id)로 주문한 상품의 오더정보 / 상품정보\r\n  customerGoodsHistory: async (orderIds) => {\r\n    console.log('🔥 주문 ID 리스트:', orderIds);\r\n    alert('GoodsApi customerGoodsHistory');\r\n    try {\r\n      const result = await instance.post('/goods/orderinfo', orderIds);\r\n      if (result.data != null) {\r\n        console.log(`구매이력 상품 호출 완료 => ${JSON.stringify(result.data)}`);\r\n        return result.data;\r\n      }\r\n    } catch (err) {}\r\n  },\r\n\r\n  // <Goods />\r\n  regGoods: async (formData) => {\r\n    try {\r\n      const result = await instance.post('/goods/register', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      if (result.data != null) {\r\n        alert(`상품등록 완료 => ${result.data}`);\r\n        return result.data;\r\n      }\r\n    } catch (err) {\r\n      console.error('상품 등록 실패:', err);\r\n      alert('상품 등록 중 에러가 발생했습니다.');\r\n    }\r\n  },\r\n\r\n  // 상품상세정보\r\n  goodsDetail: async (goods_id) => {},\r\n\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 주  문 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  // <Order />\r\n  order: async () => {\r\n    const result = await instance.post(`/goods/order`);\r\n    return result.data;\r\n  },\r\n\r\n  // <OrderDetail />\r\n  orderList: async () => {\r\n    const result = await instance.get('/goods/ordered');\r\n    return result.data;\r\n  },\r\n\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 결  제 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n  // 결제\r\n  pay: async (payload) => {\r\n    payload.goodsList.forEach((item) => {\r\n      console.log(`결제 시도 => 상품 ID: ${item.goods_id}, 상품 수량: ${item.quantity}`);\r\n    });\r\n    const result = await instance.post(`/goods/pay`, payload);\r\n    try {\r\n      if (result != null) {\r\n        return result.data;\r\n      } else {\r\n        alert(`GoodsApi.pay() null`);\r\n      }\r\n    } catch (err) {\r\n      console.error('오류 발생:', err);\r\n      alert('GoodsApi.pay() 수행중 에러발생.');\r\n    }\r\n\r\n    return result.data;\r\n    //console.log(JSON.stringify(payload, null, 2));\r\n  },\r\n  findAddress: async () => {\r\n    const result = await instance.get(`/goods/findaddress`);\r\n  },\r\n\r\n  // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ 끝 ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n\r\n  // // 상품등록 (기존 axios 사용한 코드 - 예시)\r\n  // regGoods: async (goods) => {\r\n  //   try {\r\n  //     const result = await axios.post(`${KH_DOMAIN}/goods/register`, goods, {\r\n  //       headers: {\r\n  //         'Content-Type': 'application/json',\r\n  //         Authorization: `${localStorage.getItem('grantType')} ${localStorage.getItem('accessToken')}`,\r\n  //       },\r\n  //     });\r\n  //     if (result.data != null) {\r\n  //       alert(`상품등록 완료 => ${result.data}`);\r\n  //       return result.data;\r\n  //     }\r\n  //   } catch (err) {\r\n  //     console.error('상품 등록 실패:', err);\r\n  //     alert('상품 등록 중 에러가 발생했습니다.');\r\n  //   }\r\n  // }, // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\r\n};\r\n\r\nexport default GoodsApi;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,QAAQ,MAAM,sBAAsB,CAAC,CAAC;;AAE7C,MAAMC,SAAS,GAAG,uBAAuB;AACzC,MAAMC,QAAQ,GAAG;EACf;EACA;EACAC,SAAS,EAAE,MAAOC,KAAK,IAAK;IAC1B;;IAEAC,OAAO,CAACC,GAAG,CAAC,iBAAiBF,KAAK,CAACG,QAAQ,SAASH,KAAK,CAACI,QAAQ,EAAE,CAAC;IACrE,MAAMC,MAAM,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,WAAW,EAAEN,KAAK,CAAC;IACtD,IAAI;MACF,IAAIK,MAAM,CAACE,IAAI,IAAI,IAAI,EAAE;QACvBN,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;QACzB,OAAOG,MAAM,CAACE,IAAI;MACpB,CAAC,MAAM;QACLN,OAAO,CAACC,GAAG,CAAC,YAAY,CAAC;MAC3B;IACF,CAAC,CAAC,OAAOM,GAAG,EAAE;MACZP,OAAO,CAACQ,KAAK,CAAC,aAAa,EAAED,GAAG,CAAC;MACjCE,KAAK,CAAC,uBAAuB,CAAC;IAChC;EACF,CAAC;EACD;EACAC,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,MAAMN,MAAM,GAAG,MAAMT,QAAQ,CAACgB,GAAG,CAAC,YAAY,CAAC;IAC/CF,KAAK,CAAC,8BAA8BG,IAAI,CAACC,SAAS,CAACT,MAAM,CAACE,IAAI,CAAC,GAAG,CAAC;IACnE,OAAOF,MAAM,CAACE,IAAI;EACpB,CAAC;EAED;EACA;EACAQ,SAAS,EAAE,MAAAA,CAAA,KAAY;IACrB,IAAI;MACF,MAAMV,MAAM,GAAG,MAAMT,QAAQ,CAACgB,GAAG,CAAC,aAAa,CAAC;MAChD,IAAIP,MAAM,CAACE,IAAI,IAAI,IAAI,EAAE;QACvBG,KAAK,CAAC,mBAAmBG,IAAI,CAACC,SAAS,CAACT,MAAM,CAACE,IAAI,CAAC,EAAE,CAAC;QACvD,OAAOF,MAAM,CAACE,IAAI;MACpB;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE,CAAC;EACjB,CAAC;EAED;EACAQ,oBAAoB,EAAE,MAAOC,QAAQ,IAAK;IACxChB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEe,QAAQ,CAAC;IACtCP,KAAK,CAAC,+BAA+B,CAAC;IACtC,IAAI;MACF,MAAML,MAAM,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,kBAAkB,EAAEW,QAAQ,CAAC;MAChE,IAAIZ,MAAM,CAACE,IAAI,IAAI,IAAI,EAAE;QACvBN,OAAO,CAACC,GAAG,CAAC,oBAAoBW,IAAI,CAACC,SAAS,CAACT,MAAM,CAACE,IAAI,CAAC,EAAE,CAAC;QAC9D,OAAOF,MAAM,CAACE,IAAI;MACpB;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE,CAAC;EACjB,CAAC;EAED;EACAU,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,IAAI;MACF,MAAMd,MAAM,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,iBAAiB,EAAEa,QAAQ,EAAE;QAC9DC,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,IAAIf,MAAM,CAACE,IAAI,IAAI,IAAI,EAAE;QACvBG,KAAK,CAAC,cAAcL,MAAM,CAACE,IAAI,EAAE,CAAC;QAClC,OAAOF,MAAM,CAACE,IAAI;MACpB;IACF,CAAC,CAAC,OAAOC,GAAG,EAAE;MACZP,OAAO,CAACQ,KAAK,CAAC,WAAW,EAAED,GAAG,CAAC;MAC/BE,KAAK,CAAC,qBAAqB,CAAC;IAC9B;EACF,CAAC;EAED;EACAW,WAAW,EAAE,MAAOlB,QAAQ,IAAK,CAAC,CAAC;EAEnC;EACA;EACAmB,KAAK,EAAE,MAAAA,CAAA,KAAY;IACjB,MAAMjB,MAAM,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,cAAc,CAAC;IAClD,OAAOD,MAAM,CAACE,IAAI;EACpB,CAAC;EAED;EACAgB,SAAS,EAAE,MAAAA,CAAA,KAAY;IACrB,MAAMlB,MAAM,GAAG,MAAMT,QAAQ,CAACgB,GAAG,CAAC,gBAAgB,CAAC;IACnD,OAAOP,MAAM,CAACE,IAAI;EACpB,CAAC;EAED;EACA;EACAiB,GAAG,EAAE,MAAOC,OAAO,IAAK;IACtBA,OAAO,CAACC,SAAS,CAACC,OAAO,CAAEC,IAAI,IAAK;MAClC3B,OAAO,CAACC,GAAG,CAAC,mBAAmB0B,IAAI,CAACzB,QAAQ,YAAYyB,IAAI,CAACxB,QAAQ,EAAE,CAAC;IAC1E,CAAC,CAAC;IACF,MAAMC,MAAM,GAAG,MAAMT,QAAQ,CAACU,IAAI,CAAC,YAAY,EAAEmB,OAAO,CAAC;IACzD,IAAI;MACF,IAAIpB,MAAM,IAAI,IAAI,EAAE;QAClB,OAAOA,MAAM,CAACE,IAAI;MACpB,CAAC,MAAM;QACLG,KAAK,CAAC,qBAAqB,CAAC;MAC9B;IACF,CAAC,CAAC,OAAOF,GAAG,EAAE;MACZP,OAAO,CAACQ,KAAK,CAAC,QAAQ,EAAED,GAAG,CAAC;MAC5BE,KAAK,CAAC,0BAA0B,CAAC;IACnC;IAEA,OAAOL,MAAM,CAACE,IAAI;IAClB;EACF,CAAC;EACDsB,WAAW,EAAE,MAAAA,CAAA,KAAY;IACvB,MAAMxB,MAAM,GAAG,MAAMT,QAAQ,CAACgB,GAAG,CAAC,oBAAoB,CAAC;EACzD;;EAEA;;EAEA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;EACA;AACF,CAAC;AAED,eAAed,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}