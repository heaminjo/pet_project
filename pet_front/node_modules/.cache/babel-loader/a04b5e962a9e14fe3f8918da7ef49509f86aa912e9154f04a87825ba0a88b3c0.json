{"ast":null,"code":"// import { useNavigate, useParams } from 'react-router-dom';\n// import CartComp from './CartStyle';\n// import { useEffect, useRef, useState } from 'react';\n// import GoodsApi from '../../../api/GoodsApi';\n\n// export default function Cart() {\n//   const navigate = useNavigate();\n//   const cartImage1 = process.env.PUBLIC_URL + '/images/pic1.png';\n//   const seller = process.env.PUBLIC_URL + '/images/avatar.png';\n//   const [goods, setGoods] = useState([]);\n//   const [checked, setChecked] = useState({}); // key: 인덱스 , value: 체크유무\n//   const [quantityMap, setQuantityMap] = useState({}); // Map 용도( goods id : goods quantity )\n//   const deliverPrice = 3000;\n\n//   // Goods 정보 요청\n//   const cart = async () => {\n//     GoodsApi.cartList()\n//       .then((response) => {\n//         setGoods(response);\n//       })\n//       .catch((err) => {});\n//   };\n\n//   // 체크박스의 선택 상태를 토글\n//   const handleCheckboxChange = (index) => {\n//     setChecked((prev) => ({\n//       ...prev,\n//       [index]: !prev[index],\n//     }));\n//   };\n\n//   // 체크한 상품의 총금액 (quantityMap)\n//   const getCheckedTotalPrice = () => {\n//     return goods.reduce((total, item, index) => {\n//       if (!checked[index]) return total; // 체크안된 상품 건너뜀 (누적X)\n//       const quantity = quantityMap[item.goods_id] || 1; //\n//       return total + item.price * quantity;\n//     }, 0);\n//   };\n\n//   // 구매버튼 클릭시 : 체크박스, 수량\n//   const handleBuyClick = () => {\n//     const isAnyChecked = Object.values(checked).some((value) => value);\n//     if (!isAnyChecked) {\n//       alert('최소 한 개 이상의 상품을 선택해 주세요!');\n//       return;\n//     }\n//     // 선택된 상품 넘기기\n//     const selectedGoods = goods\n//       .filter((_, idx) => checked[idx]) //\n//       .map((item) => ({\n//         ...item,\n//         quantity: quantityMap[item.goods_id] || 1,\n//       }));\n//     navigate('/user/pay', { state: { goods: selectedGoods } });\n//   };\n\n//   // 구매수량 조절 버튼\n//   const increase = (goodsId) => {\n//     // 상품의 최대 구매가능 수량(재고)\n//     const goodsMaxQuantity = goods.find((g) => g.goods_id === goodsId).quantity;\n\n//     setQuantityMap((prev) => {\n//       const currentQuantity = prev[goodsId] || 1; // 현재 수량\n//       if (goodsMaxQuantity - currentQuantity <= 0) {\n//         alert(`구매 가능 수량(${goodsMaxQuantity}) 초과 ===> 더 이상 구매할 수 없습니다.`);\n//         return prev;\n//       }\n//       return {\n//         ...prev, // 기존 quantityMap 객체 복사 (펼침연산자 - 상태 불변성immutable 유지위해)\n//         [goodsId]: currentQuantity + 1, // goodsId를 1만큼 증가\n//       };\n//     });\n//   };\n//   const decrease = (goodsId) => {\n//     setQuantityMap((prev) => {\n//       const currentQuantity = prev[goodsId] || 1; // 현재 수량\n//       if (currentQuantity <= 1) return prev;\n//       return {\n//         ...prev,\n//         [goodsId]: prev[goodsId] - 1,\n//       };\n//     });\n//   };\n\n//   useEffect(() => {\n//     // cart(); // 호출\n//   }, []);\n\n//   return (\n//     <CartComp>\n//       <div className='container'>\n//         <div className='top'>\n//           <h2> 장바구니 </h2>\n//         </div>\n//         <div className='body'>\n//           <div className='left'>\n//             {goods.map((item, index) => (\n//               <div className='prod' key={index}>\n//                 <div className='prodleft'>\n//                   <label>\n//                     <input type='checkbox' checked={checked[index] || false} onChange={() => handleCheckboxChange(index)} style={{ width: '20px', height: '20px', cursor: 'pointer' }} required />\n//                     &nbsp;&nbsp;&nbsp;\n//                   </label>\n//                   <img src={cartImage1} alt='상품1이미지' className='cartimage' onClick={() => navigate('/user/order', { state: { goods: item } })} />\n//                 </div>\n//                 <div className='prodright'>\n//                   <div>\n//                     <b>상품명</b>&nbsp;&nbsp;{item.goods_name}\n//                   </div>\n//                   <div>\n//                     <b>상세정보</b>&nbsp;&nbsp;{item.description}\n//                   </div>\n//                   <div>\n//                     <b>가격</b>&nbsp;&nbsp; {item.price}\n//                   </div>\n//                   <div>\n//                     <b>구매가능 수량</b>&nbsp;&nbsp; {item.quantity}\n//                   </div>\n//                   <div>\n//                     <b>수량</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n//                     <button onClick={() => decrease(item.goods_id)} style={{ width: '20px', height: '20px' }}>\n//                       -\n//                     </button>\n//                     &nbsp;&nbsp;&nbsp;<b style={{ color: 'red' }}>{quantityMap[item.goods_id] || 1}</b>&nbsp;&nbsp;&nbsp;\n//                     <button onClick={() => increase(item.goods_id)} style={{ width: '20px', height: '20px' }}>\n//                       +\n//                     </button>\n//                   </div>\n//                   <div>\n//                     <img src={seller} className='seller' alt='판매자' /> ROYAL CANIN\n//                   </div>\n//                   <div>내일 7시 도착</div>\n//                 </div>\n//               </div>\n//             ))}\n//           </div>\n//           <div className='right'>\n//             <table>\n//               <tbody>\n//                 <tr>\n//                   <td colSpan='2'>\n//                     <b>주문예상금액</b>\n//                   </td>\n//                 </tr>\n//                 <tr>\n//                   <td>상품가격</td>\n//                   <td> {getCheckedTotalPrice()} 원</td>\n//                 </tr>\n//                 <tr>\n//                   <td>배송비</td>\n//                   <td> {deliverPrice} 원</td>\n//                 </tr>\n//                 <tr>\n//                   <td>최종 가격</td>\n//                   <td> {getCheckedTotalPrice() + deliverPrice}원</td>\n//                 </tr>\n//               </tbody>\n//             </table>\n//             <button className='buy' onClick={() => handleBuyClick()}>\n//               구매하기\n//             </button>\n//             <button className='buy' onClick={() => navigate('/')}>\n//               취소\n//             </button>\n//           </div>\n//         </div>\n//       </div>\n//     </CartComp>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/devv/pet_project/pet_front/src/components/Layout/cart/Cart.jsx"],"sourcesContent":["// import { useNavigate, useParams } from 'react-router-dom';\r\n// import CartComp from './CartStyle';\r\n// import { useEffect, useRef, useState } from 'react';\r\n// import GoodsApi from '../../../api/GoodsApi';\r\n\r\n// export default function Cart() {\r\n//   const navigate = useNavigate();\r\n//   const cartImage1 = process.env.PUBLIC_URL + '/images/pic1.png';\r\n//   const seller = process.env.PUBLIC_URL + '/images/avatar.png';\r\n//   const [goods, setGoods] = useState([]);\r\n//   const [checked, setChecked] = useState({}); // key: 인덱스 , value: 체크유무\r\n//   const [quantityMap, setQuantityMap] = useState({}); // Map 용도( goods id : goods quantity )\r\n//   const deliverPrice = 3000;\r\n\r\n//   // Goods 정보 요청\r\n//   const cart = async () => {\r\n//     GoodsApi.cartList()\r\n//       .then((response) => {\r\n//         setGoods(response);\r\n//       })\r\n//       .catch((err) => {});\r\n//   };\r\n\r\n//   // 체크박스의 선택 상태를 토글\r\n//   const handleCheckboxChange = (index) => {\r\n//     setChecked((prev) => ({\r\n//       ...prev,\r\n//       [index]: !prev[index],\r\n//     }));\r\n//   };\r\n\r\n//   // 체크한 상품의 총금액 (quantityMap)\r\n//   const getCheckedTotalPrice = () => {\r\n//     return goods.reduce((total, item, index) => {\r\n//       if (!checked[index]) return total; // 체크안된 상품 건너뜀 (누적X)\r\n//       const quantity = quantityMap[item.goods_id] || 1; //\r\n//       return total + item.price * quantity;\r\n//     }, 0);\r\n//   };\r\n\r\n//   // 구매버튼 클릭시 : 체크박스, 수량\r\n//   const handleBuyClick = () => {\r\n//     const isAnyChecked = Object.values(checked).some((value) => value);\r\n//     if (!isAnyChecked) {\r\n//       alert('최소 한 개 이상의 상품을 선택해 주세요!');\r\n//       return;\r\n//     }\r\n//     // 선택된 상품 넘기기\r\n//     const selectedGoods = goods\r\n//       .filter((_, idx) => checked[idx]) //\r\n//       .map((item) => ({\r\n//         ...item,\r\n//         quantity: quantityMap[item.goods_id] || 1,\r\n//       }));\r\n//     navigate('/user/pay', { state: { goods: selectedGoods } });\r\n//   };\r\n\r\n//   // 구매수량 조절 버튼\r\n//   const increase = (goodsId) => {\r\n//     // 상품의 최대 구매가능 수량(재고)\r\n//     const goodsMaxQuantity = goods.find((g) => g.goods_id === goodsId).quantity;\r\n\r\n//     setQuantityMap((prev) => {\r\n//       const currentQuantity = prev[goodsId] || 1; // 현재 수량\r\n//       if (goodsMaxQuantity - currentQuantity <= 0) {\r\n//         alert(`구매 가능 수량(${goodsMaxQuantity}) 초과 ===> 더 이상 구매할 수 없습니다.`);\r\n//         return prev;\r\n//       }\r\n//       return {\r\n//         ...prev, // 기존 quantityMap 객체 복사 (펼침연산자 - 상태 불변성immutable 유지위해)\r\n//         [goodsId]: currentQuantity + 1, // goodsId를 1만큼 증가\r\n//       };\r\n//     });\r\n//   };\r\n//   const decrease = (goodsId) => {\r\n//     setQuantityMap((prev) => {\r\n//       const currentQuantity = prev[goodsId] || 1; // 현재 수량\r\n//       if (currentQuantity <= 1) return prev;\r\n//       return {\r\n//         ...prev,\r\n//         [goodsId]: prev[goodsId] - 1,\r\n//       };\r\n//     });\r\n//   };\r\n\r\n//   useEffect(() => {\r\n//     // cart(); // 호출\r\n//   }, []);\r\n\r\n//   return (\r\n//     <CartComp>\r\n//       <div className='container'>\r\n//         <div className='top'>\r\n//           <h2> 장바구니 </h2>\r\n//         </div>\r\n//         <div className='body'>\r\n//           <div className='left'>\r\n//             {goods.map((item, index) => (\r\n//               <div className='prod' key={index}>\r\n//                 <div className='prodleft'>\r\n//                   <label>\r\n//                     <input type='checkbox' checked={checked[index] || false} onChange={() => handleCheckboxChange(index)} style={{ width: '20px', height: '20px', cursor: 'pointer' }} required />\r\n//                     &nbsp;&nbsp;&nbsp;\r\n//                   </label>\r\n//                   <img src={cartImage1} alt='상품1이미지' className='cartimage' onClick={() => navigate('/user/order', { state: { goods: item } })} />\r\n//                 </div>\r\n//                 <div className='prodright'>\r\n//                   <div>\r\n//                     <b>상품명</b>&nbsp;&nbsp;{item.goods_name}\r\n//                   </div>\r\n//                   <div>\r\n//                     <b>상세정보</b>&nbsp;&nbsp;{item.description}\r\n//                   </div>\r\n//                   <div>\r\n//                     <b>가격</b>&nbsp;&nbsp; {item.price}\r\n//                   </div>\r\n//                   <div>\r\n//                     <b>구매가능 수량</b>&nbsp;&nbsp; {item.quantity}\r\n//                   </div>\r\n//                   <div>\r\n//                     <b>수량</b>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\r\n//                     <button onClick={() => decrease(item.goods_id)} style={{ width: '20px', height: '20px' }}>\r\n//                       -\r\n//                     </button>\r\n//                     &nbsp;&nbsp;&nbsp;<b style={{ color: 'red' }}>{quantityMap[item.goods_id] || 1}</b>&nbsp;&nbsp;&nbsp;\r\n//                     <button onClick={() => increase(item.goods_id)} style={{ width: '20px', height: '20px' }}>\r\n//                       +\r\n//                     </button>\r\n//                   </div>\r\n//                   <div>\r\n//                     <img src={seller} className='seller' alt='판매자' /> ROYAL CANIN\r\n//                   </div>\r\n//                   <div>내일 7시 도착</div>\r\n//                 </div>\r\n//               </div>\r\n//             ))}\r\n//           </div>\r\n//           <div className='right'>\r\n//             <table>\r\n//               <tbody>\r\n//                 <tr>\r\n//                   <td colSpan='2'>\r\n//                     <b>주문예상금액</b>\r\n//                   </td>\r\n//                 </tr>\r\n//                 <tr>\r\n//                   <td>상품가격</td>\r\n//                   <td> {getCheckedTotalPrice()} 원</td>\r\n//                 </tr>\r\n//                 <tr>\r\n//                   <td>배송비</td>\r\n//                   <td> {deliverPrice} 원</td>\r\n//                 </tr>\r\n//                 <tr>\r\n//                   <td>최종 가격</td>\r\n//                   <td> {getCheckedTotalPrice() + deliverPrice}원</td>\r\n//                 </tr>\r\n//               </tbody>\r\n//             </table>\r\n//             <button className='buy' onClick={() => handleBuyClick()}>\r\n//               구매하기\r\n//             </button>\r\n//             <button className='buy' onClick={() => navigate('/')}>\r\n//               취소\r\n//             </button>\r\n//           </div>\r\n//         </div>\r\n//       </div>\r\n//     </CartComp>\r\n//   );\r\n// }\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}